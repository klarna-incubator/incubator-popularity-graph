{"version":3,"sources":["hooks/useWindowSize.js","App.js","hooks/useInterval.js","index.js"],"names":["getSize","width","window","innerWidth","height","innerHeight","BarComponent","props","useDimensions","ref","isTextBig","x","transform","y","fill","color","textAnchor","dominantBaseline","style","fontSize","data","indexValue","value","Race","size","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","setData","callback","delay","savedCallback","useRef","current","tick","id","setInterval","clearInterval","useInterval","fetch","then","r","json","n","arr","state","map","repo","name","stargazers_count","barData","sort","a","b","reverse","slice","fontFamily","marginLeft","fontWeight","layout","margin","top","right","bottom","left","indexBy","keys","colors","scheme","colorBy","borderColor","from","modifiers","enableGridX","enableGridY","axisTop","format","axisBottom","axisLeft","padding","labelTextColor","isInteractive","barComponent","motionStiffness","motionDamping","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.a3e400b5.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nfunction getSize() {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  }\n}\n\nexport function useWindowSize() {\n  const [windowSize, setWindowSize] = useState(getSize())\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize(getSize())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowSize\n}\n","import React, { useState } from 'react'\nimport { Bar } from '@nivo/bar'\nimport useDimensions from 'react-use-dimensions'\nimport useInterval from './hooks/useInterval'\nimport { useWindowSize } from './hooks/useWindowSize'\n\nfunction take(n, arr) {\n  return arr.slice(0, n)\n}\n\nconst BarComponent = (props) => {\n  const [ref, { width }] = useDimensions()\n\n  const isTextBig = width > props.width - 20\n  const x = isTextBig ? 10 : props.width - 16\n\n  return (\n    <g transform={`translate(${props.x},${props.y})`}>\n      <rect\n        x={-3}\n        y={7}\n        width={props.width}\n        height={props.height}\n        fill=\"rgba(0, 0, 0, .07)\"\n      />\n      <rect width={props.width} height={props.height} fill={props.color} />\n      <rect\n        x={props.width - 8}\n        width={8}\n        height={props.height}\n        fill={`rgba(0,0,0,0.2)`}\n      />\n      <text\n        x={x}\n        y={props.height / 4.5}\n        textAnchor={isTextBig ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        fill={'rgba(0,0,0,0.75)'}\n        style={{\n          fontSize: props.height / 3,\n        }}\n        ref={ref}\n      >\n        {props.data.indexValue}\n      </text>\n      <text\n        x={x}\n        y={props.height / 1.5}\n        textAnchor={isTextBig ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        fill={'black'}\n        style={{\n          fontSize: props.height / 2.1,\n        }}\n      >\n        {props.data.value}\n      </text>\n    </g>\n  )\n}\n\nconst Race = () => {\n  const size = useWindowSize()\n  const [data, setData] = useState([])\n\n  useInterval(() => {\n    fetch('https://api.github.com/orgs/klarna-incubator/repos')\n      .then((r) => r.json())\n      .then((data) => {\n        setData(data)\n      })\n  }, 60000)\n\n  const state = data.map((repo) => {\n    return {\n      id: repo.name,\n      value: repo.stargazers_count,\n    }\n  })\n\n  const barData = take(\n    18,\n    [...state].sort((a, b) => a.value - b.value).reverse()\n  ).reverse()\n\n  return (\n    <div style={{ fontFamily: 'Menlo, Consolas, monospace' }}>\n      <h1 style={{ marginLeft: 60, fontWeight: 400, color: '#334' }}>\n        Repos popularity\n      </h1>\n\n      <Bar\n        width={size.width}\n        height={size.height - 130}\n        layout=\"horizontal\"\n        margin={{ top: 26, right: 120, bottom: 26, left: 60 }}\n        data={barData}\n        indexBy=\"id\"\n        keys={['value']}\n        colors={{ scheme: 'spectral' }}\n        colorBy=\"indexValue\"\n        borderColor={{ from: 'color', modifiers: [['darker', 2.6]] }}\n        enableGridX\n        enableGridY={false}\n        axisTop={{\n          format: '~s',\n        }}\n        axisBottom={{\n          format: '~s',\n        }}\n        axisLeft={null}\n        padding={0.3}\n        labelTextColor={{ from: 'color', modifiers: [['darker', 1.4]] }}\n        isInteractive={false}\n        barComponent={BarComponent}\n        motionStiffness={170}\n        motionDamping={26}\n      />\n    </div>\n  )\n}\n\nexport default Race\n","import { useEffect, useRef } from 'react'\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      tick()\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}